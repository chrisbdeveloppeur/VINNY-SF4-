{% extends 'base.html.twig' %}

{% block title %}{% trans %} Beats{% endtrans %}{% endblock %}

{% block description %}
    <meta name="description" content="Welcome to vinnyvixi.com, the personal website of the Beat Maker Vinny Vixi. These latest productions, Beats, Video clips, and much more. Bienvenue sur vinnyvixi.com, le site personnel du Beat Maker Vinny Vixi. Ces dernières Prods, Beats, Clip vidéos, et d'autre de contenue.">
{% endblock %}


{% block titre_landscape %}
    {% trans %}Beats{% endtrans %}
{% endblock %}

{% block titre %}
    {% trans %}Beats{% endtrans %}
{% endblock %}

{% block visualizer %}
        <canvas id="canvas"></canvas>
{% endblock %}

{% block audiocontrol %}

        {% block player %}

        {% endblock %}

{% endblock %}

{% block filtre %}
    <div class="columns is-flex align-items-center has-background-black-bis div-filtre" style="margin: 0;z-index: 1;width: 100%;box-shadow: rgb(0, 0, 0) 0 0 15px;position: sticky">
        <div class="is-flex align-items-center" style="margin: auto 0;">
            <div class="column">
                <strong class="has-text-white" style="white-space: nowrap">Genres :</strong>
            </div>
        </div>

        <div id="myBtnContainer" class="buttons are-small columns is-multiline" style="margin: auto 0;">

                <button class="button is-xsmall active is-light is-outlined is-family-sans-serif font-weight-bold is-uppercase" style="margin-top: 0.5rem;padding: 2px 1rem;" type="submit" onclick="filterSelection('all')"> {% trans %}All{% endtrans %}</button>

            {% for filtre in filtre %}

                {% if filtre.beats is not empty %}
                    <button class="button is-xsmall is-light is-outlined is-family-sans-serif font-weight-bold is-uppercase" value="{{ filtre.genre }}" style="margin-top: 0.5rem;padding: 2px 1rem;" type="submit"  onclick="filterSelection('{{ filtre.genre }}')">
                        {{ filtre.genre }}
                    </button>
                {% endif %}

            {% endfor %}

        </div>


        <div id="arrow-deploy-player" title="{% trans %}Show player{% endtrans %}">
            <span>{% trans %}Deploy player{% endtrans %}</span>
            <span class="icon is-small">
                <i class="fas fa-lg fa-caret-right"></i>
            </span>
        </div>

    </div>

    {% include 'includes/player.html.twig' %}

{% endblock %}

{% block entete %}
    <h2 class="subtitle has-text-centered is-4 is-family-primary has-text-white-bis" style="position: relative;margin-top:50px;padding: 10px;border-radius: 5px;background: rgba(0,0,0,.8);box-shadow: rgb(0, 0, 0) 0 0 10px">
        {% trans %}Welcome to the beatmaker Vinnyvixi's website{% endtrans %}
    </h2>
{% endblock %}





{% block content %}

    <div class="column">



        {% include 'includes/flash_message.html.twig' %}

        {% if form_errors(form) != null %}
            <div class="form-error notification is-danger is-flex justify-content-center align-items-center column has-text-weight-bold has-text-black">
                <button class="delete is-large" onclick="this.parentElement.parentElement.removeChild(this.parentElement);"></button>
                {{ form_errors(form) }}
            </div>
        {% endif %}


            <h4 class="subtitle is-6 has-text-white has-background-black" style="margin: 0;padding:0 30px;width: max-content;border-top-right-radius:.3rem;border-top-left-radius: .3rem">{% trans %}Filter with bpm{% endtrans %} :</h4>

        <div class="field has-addons pagination-control">

            {{ form_start(form) }}
            <div class="field has-addons bpmSearch" style="justify-content: center">
                <p class="control" title="{% trans %}Beats per minute{% endtrans %}">
                    <a class="button is-static pagination-control-touch" style="border-radius: 0;">
                        BPM
                    </a>
                </p>

                <div class="control">
                    {{ form_row(form.beatBpmMin) }}
                </div>

                <div class="control">
                    {{ form_row(form.beatBpmMax) }}
                </div>

                <div class="control">
                    <button class="button is-link pagination-control-touch" type="submit">
                        {% trans %}Search{% endtrans %}
                    </button>
                </div>

            </div>
            {{  form_end(form) }}

        </div>



        <div class="column has-text-centered box" style="background: rgba(23,162,176,0.7);box-shadow: rgb(0, 0, 0) 0 0 15px;">

            {% include 'beats/original_beats.html.twig' with {beat: beat} %}

        </div>

        {{ include('includes/donation.html.twig') }}

    </div>

    {% if app.request.locale == 'en' %}
        {% include 'lightbox/license_lightbox.html.twig' %}
    {% elseif app.request.locale == 'fr' %}
        {% include 'lightbox/license_lightbox_fr.html.twig' %}
    {% endif %}



    <script>
        let navLinkHome = document.getElementById('navLinkHome');
        navLinkHome.classList.add("navlink-active");
    </script>



    {#   SCRIPT POUR LIGHTBOX MODAL   #}
    <script>
        $(".showModal").click(function() {
            $(".modal").css("height","100%");
        });

        $(".modal-close").click(function() {
            $(".modal").css("height","0");
        });

        $(".modal-background").click(function() {
            $(".modal").css("height","0");
        });

    </script>
    {#  FIN SCRIPT POUR LIGHTBOX MODAL   #}




    {#      SCRIPT POUR FILTRE BEATS      #}

    <script>
        filterSelection("all");
        function filterSelection(c) {
            var x, i;
            x = document.getElementsByClassName("filterDiv");
            if (c === "all") c = "";
            // Add the "show" class (display:block) to the filtered elements, and remove the "show" class from the elements that are not selected
            for (i = 0; i < x.length; i++) {
                w3RemoveClass(x[i], "show");
                if (x[i].className.indexOf(c) > -1) w3AddClass(x[i], "show");
            }
        }

        // Show filtered elements
        function w3AddClass(element, name) {
            var i, arr1, arr2;
            arr1 = element.className.split(" ");
            arr2 = name.split(" ");
            for (i = 0; i < arr2.length; i++) {
                if (arr1.indexOf(arr2[i]) === -1) {
                    element.className += " " + arr2[i];
                }
            }
        }

        // Hide elements that are not selected
        function w3RemoveClass(element, name) {
            var i, arr1, arr2;
            arr1 = element.className.split(" ");
            arr2 = name.split(" ");
            for (i = 0; i < arr2.length; i++) {
                while (arr1.indexOf(arr2[i]) > -1) {
                    arr1.splice(arr1.indexOf(arr2[i]), 1);
                }
            }
            element.className = arr1.join(" ");
        }

        // Add active class to the current control button (highlight it)
        var btnContainer = document.getElementById("myBtnContainer");
        var btns = btnContainer.getElementsByClassName("button");
        for (var i = 0; i < btns.length; i++) {
            btns[i].addEventListener("click", function() {
                var current = document.getElementsByClassName("active");
                current[0].className = current[0].className.replace(" active", "");
                this.className += " active";
            });
        }
    </script>

    {#      FIN SCRIPT POUR FILTRE BEATS      #}


    {#   SCRIPT PLYR   #}
    <script>
        var players = Plyr.setup('.js-plyr', {
            "controls":['play-large', 'play', 'progress', 'current-time', 'mute', 'volume', 'captions','pip', 'airplay', 'fullscreen']
        });

        {#   AUTONEXT & AUTOPAUSE   #}
        var i = 1;

        let playBtn = document.querySelector("button.playBtn");
        let playIcon = document.getElementById('playIcon');
        let nextBtn = document.querySelector('button.nextBtn');
        let prevBtn = document.querySelector('button.prevBtn');
        let stopBtn = document.querySelector('button.stopBtn');
        let loopBtn = document.querySelector('button.loopBtn');
        let loopIcon = document.getElementById('loopIcon');
        let initialStyleLoopBtn = loopIcon.style;

        let allAudio = document.getElementsByTagName("audio");

        function takeCurrentBeat(media) {
            playBtn.name = media.id;
        }

        {#     PLAY BUTTON HEADER     #}
        playBtn.addEventListener('click', function () {
            let currentAudio = document.getElementById(playBtn.name.toString());
            if (currentAudio == null){
                currentAudio = allAudio[0];
            }
            if (currentAudio.paused === false) {
                currentAudio.pause();
                playIcon.classList.replace('fa-play', 'fa-pause');
            }else{
                currentAudio.play();
                playIcon.classList.replace('fa-pause', 'fa-play');
            }
        });

        {#     FUNCTION NEXT BEAT (PLAYER HEADER)     #}
        nextBtn.addEventListener('click', function () {
            let currentAudio = document.getElementById(playBtn.name.toString());
            nextBeat(currentAudio);
        });

        function nextBeat(audio) {
            let nextAudio;

            stopBeat(audio);

            for (i = 0; i<allAudio.length; i++){
                if (allAudio[i] === audio){
                    nextAudio = allAudio[i+1];
                }else {
                    allAudio[i].currentTime = 0;
                }
            }

            if (audio == null){
                allAudio[1].play();
            }

            if (audio != null) {
                if (audio === allAudio[allAudio.length - 1]) {
                    audio.currentTime = 0;
                    allAudio[0].play();
                }else {
                    audio.currentTime = 0;
                    nextAudio.play();
                }
            }
        }

        {#     FUNCTION PREVIOUS BEAT (PLAYER HEADER)     #}
        prevBtn.addEventListener('click', function () {
            let currentAudio = document.getElementById(playBtn.name.toString());
            previousBeat(currentAudio);
        });

        function previousBeat(audio) {
            let prevAudio;

            stopBeat(audio);

            for (i=0; i<allAudio.length; i++){
                if (audio === allAudio[i]){
                    prevAudio = allAudio[i-1];
                }else {
                    allAudio[i].currentTime = 0;
                }
            }

            if (audio == null){
                allAudio[allAudio.length - 1].play();
            }

            if (audio != null){
                if (audio === allAudio[0]) {
                    audio.currentTime = 0;
                    allAudio[allAudio.length - 1].play();
                }else {
                    audio.currentTime = 0;
                    prevAudio.play();
                }
            }
        }


        {#    FUNCTION STOP BEAT (PLAYER HEADER)     #}
        stopBtn.addEventListener('click', function () {
            let currentAudio = document.getElementById(playBtn.name.toString());
            stopBeat(currentAudio);
        });

        function stopBeat(audio) {
            if (audio != null){
                for (i=0; i<allAudio.length; i++){
                    allAudio[i].pause();
                }
                audio.currentTime = 0;
            }
        }


        {#     LOOP BUTTON HEADER     #}
        loopBtn.addEventListener('click', function () {
            let currentAudio = document.getElementById(playBtn.name.toString());
            loopBeat(currentAudio);
        });

        function loopBeat(audio) {
            if (audio !== null) {
                if (audio.classList.contains('loop-actived')) {
                    for (i=0; i<allAudio.length; i++){
                        allAudio[i].classList.remove('loop-actived');
                    }
                    loopIcon.style = initialStyleLoopBtn;
                }else{
                    for (i=0; i<allAudio.length; i++){
                        allAudio[i].classList.add('loop-actived');
                    }
                    loopIcon.style.color = "white";
                }
            }else {
                for (i=0; i<allAudio.length; i++){
                    allAudio[i].classList.add('loop-actived');
                }
                loopIcon.style.color = "white";
            }
        }




        players.forEach(function (instance) {

            instance.volume = 0.3;
            instance.on('ready', function (event) {

                instance.elements.container.setAttribute('id', 'plyId-' + i);
                instance.plyId = 'plyr-' + i;
                let lenght = players.length;
                var j = i+1;
                if (j > lenght){
                    j = 1;
                }
                let nextId = 'plyId-' + j;
                i++;

                instance.on('ended', function (event) {
                    let nextBeat = document.getElementById(nextId);
                    let audio = instance.media;

                    if (audio.classList.contains('loop-actived')) {
                        audio.currentTime = 0;
                        audio.play();
                    }else {
                        nextBeat.children[1].play();
                    }
                });

                instance.on('pause', function () {
                    let count = 0;

                    for (i = 0; i<allAudio.length; i++){
                        if (allAudio[i].paused === true){
                            count++;
                            if (count === allAudio.length) {
                                playIcon.classList.replace('fa-pause', 'fa-play');
                            }
                        }
                    }

                });

                instance.on('play', function (event) {
                    let currentAudio = instance.media;

                    deployPlayer();
                    barProgessTime(currentAudio);
                    visualizerCanvas(currentAudio);

                    if (currentAudio.getAttribute('title')) {
                        for (i=0; i<trackTitlePlayer.length; i++){
                            trackTitlePlayer[i].innerHTML = currentAudio.getAttribute('title');
                        }
                    }else {
                        for (i=0; i<trackTitlePlayer.length; i++){
                            trackTitlePlayer[i].innerHTML = "{% trans %}No title{% endtrans %}";
                        }
                    }

                    canvas.style.display = "flex";
                    playIcon.classList.replace('fa-play', 'fa-pause');
                    var currentPid = instance.plyId;
                    takeCurrentBeat(currentAudio);
                    players.forEach(function (instance) {
                        if (currentPid !== instance.plyId) {
                            instance.pause();
                        }
                    });
                });

            });



        });

        {#  FIN AUTONEXT & AUTOPAUSE  #}

    </script>
    {#  FIN SCRIPT PLYR   #}









    {#  SCRIPT POUR PLAYER AUDIO HEADER   #}
    <script>

        /////////////////////////////////////////////////////////////////////
        ///////////         DEPLOY / HIDE PLAYER HEADER          ////////////
        /////////////////////////////////////////////////////////////////////

        let sectionPlayer = document.getElementById("player");
        let arrowDeploy = document.getElementById('arrow-deploy-player');
        let crossHide = document.getElementById('cross-hide-player');

        function deployPlayer(){
            sectionPlayer.style.visibility = "visible";
            setTimeout(function () {
                sectionPlayer.style.opacity = "1";
                arrowDeploy.style.display = "none";
            },50);
        }

        function hidePlayer(){
            sectionPlayer.style.opacity = "0";
            setTimeout(function () {
                arrowDeploy.style.display = "flex";
                sectionPlayer.style.visibility = "hidden";
            }, 500);
        }


        arrowDeploy.addEventListener('click', deployPlayer);
        crossHide.addEventListener('click', hidePlayer);


        //////////////////////////////////////////////////////////////////////////
        ///////////////         BARE DE PROGRESSION PLAYER    ////////////////////
        //////////////////////////////////////////////////////////////////////////

        let audio = document.getElementById(playBtn.name.toString());
        let trackTitle = document.getElementById("track-title");
        let trackTitlePlayer = document.querySelectorAll(".track-title");
        let barTime = document.querySelectorAll(".timeLine");
        let barCurrentTime = document.querySelectorAll(".bar-current-time");
        let currentTrackTime = document.querySelectorAll(".current-time");
        let trackTime = document.querySelectorAll(".track-time");
        let canvas = document.getElementById("canvas");


        function barProgessTime(audio)
        {
            ///////////////    CONVERSION MUSIC TIME    ////////////////////
            String.prototype.toMMSS = function () {
                var sec_num = parseInt(this, 10); // don't forget the second param
                var hours   = Math.floor(sec_num / 3600);
                var minutes = Math.floor((sec_num - (hours * 3600)) / 60);
                var seconds = sec_num - (hours * 3600) - (minutes * 60);

                if (minutes < 10) {minutes = minutes;}
                if (seconds < 10) {seconds = "0"+seconds;}
                return minutes+':'+seconds;
            };

            ///////////////     CURRENT TIME BAR MOVE     ////////////////////
            audio.addEventListener('timeupdate', (event) =>
            {
                let currentTime = Math.trunc(audio.currentTime.toString());
                let Time = Math.trunc(audio.duration.toString());

                for (i=0; i<currentTrackTime.length; i++) {
                    currentTrackTime[i].innerHTML = currentTime.toString().toMMSS();
                }

                for (i=0; i<trackTime.length; i++) {
                    trackTime[i].innerHTML = Time.toString().toMMSS();
                }

                for (i=0; i<barCurrentTime.length; i++) {
                    barCurrentTime[i].style.width = audio.currentTime / (audio.duration / 100) + "%";
                }
            });
        }


        //////////////////////////////////////////////////////////////////////////
        ///////////////         CANVAS VUSIAL          ///////////////////////////
        //////////////////////////////////////////////////////////////////////////

        function visualizerCanvas(audio) {
            var context = new AudioContext();
            var src = context.createMediaElementSource(audio);
            var analyser = context.createAnalyser();
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight * 0.3 ;
            var ctx = canvas.getContext("2d");

            src.connect(analyser);
            analyser.connect(context.destination);

            analyser.fftSize = 512;

            var bufferLength = analyser.frequencyBinCount;

            var dataArray = new Uint8Array(bufferLength);

            var WIDTH = canvas.width;
            var HEIGHT = canvas.height;

            var barWidth = (WIDTH / bufferLength) * 2;
            var barHeight;
            var x = 0;

            function renderFrame() {
                requestAnimationFrame(renderFrame);

                x = 0;

                analyser.getByteFrequencyData(dataArray);

                ctx.fillStyle = "#121212";
                ctx.strokeStyle = "black";
                ctx.globalAlpha = 1;
                ctx.lineCap = "round";
                ctx.fillRect(0, 0, WIDTH, HEIGHT);

                for (var i = 0; i < bufferLength; i++) {
                    barHeight = dataArray[i];

                    var r = 0;
                    var g = barHeight;
                    var b = 255;

                    ctx.fillStyle = "rgb(" + r + "," + g + "," + b + ")";
                    ctx.lineCap = "round";
                    ctx.fillRect(x, HEIGHT - barHeight, barWidth, barHeight);

                    x += barWidth + 1;
                }
            }

            renderFrame();

        }

    </script>
    {#  FIN SCRIPT POUR PLAYER AUDIO HEADER   #}

{% endblock %}




